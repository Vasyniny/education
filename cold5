unit MainUnit;

interface

uses
  Windows, Messages, SysUtils, Classes, Graphics, Controls, Forms, Dialogs,
  StdCtrls, CPort, ExtCtrls;

type
  TForm1 = class(TForm)
    ComPort1: TComPort;
    Timer1: TTimer;
    Edit1: TEdit; Edit2: TEdit; Edit3: TEdit; Edit4: TEdit; Edit5: TEdit;
    Edit6: TEdit; Edit7: TEdit; Edit8: TEdit; Edit9: TEdit; Edit10: TEdit;
    Edit11: TEdit; Edit12: TEdit; Edit13: TEdit;
    procedure Timer1Timer(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure ComPort1TxEmpty(Sender: TObject);
    procedure ComPort1RxChar(Sender: TObject; Count: Integer);
  private
    FEditArray: array[0..11] of TEdit;
    FCurrentDevice: Byte;
    FRequestType: (rtMain, rtAdditional);
    FExpectedResponseLen: Integer;
    
    function CalculateCRC16(const Data: array of Byte; Len: Integer): Word;
    function BytesToFloat(HiReg, LoReg: Word): Single;
    procedure SendMainRequest(DeviceAddress: Byte);
    procedure SendAdditionalRequest(DeviceAddress: Byte);
    procedure ProcessMainResponse(DeviceAddress: Byte);
    procedure ProcessAdditionalResponse(DeviceAddress: Byte);
  public
    { Public declarations }
  end;

var
  Form1: TForm1;

implementation

{$R *.dfm}

const
  MAIN_REG_START = 25;
  MAIN_REG_COUNT = 6;
  ADDITIONAL_REG_START = 72;
  ADDITIONAL_REG_COUNT = 2;
  RESPONSE_TIMEOUT = 100;

procedure TForm1.FormCreate(Sender: TObject);
var
  i: Integer;
begin
  FEditArray[0] := Edit1;
  FEditArray[1] := Edit2;
  FEditArray[2] := Edit3;
  FEditArray[3] := Edit4;
  FEditArray[4] := Edit5;
  FEditArray[5] := Edit6;
  FEditArray[6] := Edit7;
  FEditArray[7] := Edit8;
  FEditArray[8] := Edit9;
  FEditArray[9] := Edit10;
  FEditArray[10] := Edit11;
  FEditArray[11] := Edit12;

  FCurrentDevice := 0;
  FRequestType := rtMain;
  Timer1.Interval := 3000;
end;

function TForm1.CalculateCRC16(const Data: array of Byte; Len: Integer): Word;
var
  i, j: Integer;
  crc: Word;
begin
  crc := $FFFF;
  for i := 0 to Len-1 do
  begin
    crc := crc xor Data[i];
    for j := 0 to 7 do
    begin
      if (crc and $0001) <> 0 then
        crc := (crc shr 1) xor $A001
      else
        crc := crc shr 1;
    end;
  end;
  Result := crc;
end;

function TForm1.BytesToFloat(HiReg, LoReg: Word): Single;
var
  Bytes: array[0..3] of Byte;
begin
  // Преобразование Big-Endian в Little-Endian
  Bytes[0] := Hi(HiReg);
  Bytes[1] := Lo(HiReg);
  Bytes[2] := Hi(LoReg);
  Bytes[3] := Lo(LoReg);
  Result := PSingle(@Bytes)^;
end;

procedure TForm1.SendMainRequest(DeviceAddress: Byte);
var
  Request: array[0..7] of Byte;
  CRC: Word;
begin
  Request[0] := DeviceAddress;
  Request[1] := $03;
  Request[2] := Hi(MAIN_REG_START);
  Request[3] := Lo(MAIN_REG_START);
  Request[4] := Hi(MAIN_REG_COUNT);
  Request[5] := Lo(MAIN_REG_COUNT);
  
  CRC := CalculateCRC16(Request, 6);
  Request[6] := Lo(CRC);
  Request[7] := Hi(CRC);

  ComPort1.ClearBuffer(True, True);
  ComPort1.Write(Request, SizeOf(Request));
  FExpectedResponseLen := 17; // 3 байта заголовка + 12 данных + 2 CRC
end;

procedure TForm1.SendAdditionalRequest(DeviceAddress: Byte);
var
  Request: array[0..7] of Byte;
  CRC: Word;
begin
  Request[0] := DeviceAddress;
  Request[1] := $03;
  Request[2] := Hi(ADDITIONAL_REG_START);
  Request[3] := Lo(ADDITIONAL_REG_START);
  Request[4] := Hi(ADDITIONAL_REG_COUNT);
  Request[5] := Lo(ADDITIONAL_REG_COUNT);
  
  CRC := CalculateCRC16(Request, 6);
  Request[6] := Lo(CRC);
  Request[7] := Hi(CRC);

  ComPort1.Write(Request, SizeOf(Request));
  FExpectedResponseLen := 9; // 3 байта заголовка + 4 данных + 2 CRC
end;

procedure TForm1.ProcessMainResponse(DeviceAddress: Byte);
var
  Response: array[0..255] of Byte;
  CRC, ReceivedCRC: Word;
  i, BytesRead: Integer;
  Values: array[0..2] of Single;
begin
  BytesRead := ComPort1.Read(Response, SizeOf(Response));
  
  if BytesRead < FExpectedResponseLen then
  begin
    Edit13.Text := 'Неполный ответ';
    Exit;
  end;

  ReceivedCRC := Response[BytesRead-2] or (Response[BytesRead-1] shl 8);
  CRC := CalculateCRC16(Response, BytesRead-2);
  
  if CRC <> ReceivedCRC then
  begin
    Edit13.Text := 'Ошибка CRC';
    Exit;
  end;

  for i := 0 to 2 do
  begin
    Values[i] := BytesToFloat(
      (Response[3+i*4] shl 8) or Response[4+i*4],
      (Response[5+i*4] shl 8) or Response[6+i*4]
    );
  end;

  for i := 0 to 2 do
    FEditArray[(DeviceAddress-1)*3 + i].Text := FormatFloat('0.000', Values[i]);
end;

procedure TForm1.ProcessAdditionalResponse(DeviceAddress: Byte);
var
  Response: array[0..255] of Byte;
  CRC, ReceivedCRC: Word;
  BytesRead: Integer;
  Value: Single;
begin
  BytesRead := ComPort1.Read(Response, SizeOf(Response));
  
  if BytesRead < FExpectedResponseLen then
  begin
    Edit13.Text := 'Неполный ответ';
    Exit;
  end;

  ReceivedCRC := Response[BytesRead-2] or (Response[BytesRead-1] shl 8);
  CRC := CalculateCRC16(Response, BytesRead-2);
  
  if CRC <> ReceivedCRC then
  begin
    Edit13.Text := 'Ошибка CRC';
    Exit;
  end;

  Value := BytesToFloat(
    (Response[3] shl 8) or Response[4],
    (Response[5] shl 8) or Response[6]
  );
  
  Edit13.Text := FormatFloat('0.000', Value);
end;

procedure TForm1.ComPort1RxChar(Sender: TObject; Count: Integer);
var
  Response: array[0..255] of Byte;
  BytesRead: Integer;
begin
  BytesRead := ComPort1.Read(Response, SizeOf(Response));
  
  if BytesRead < 3 then Exit;

  case FRequestType of
    rtMain: ProcessMainResponse(FCurrentDevice);
    rtAdditional: ProcessAdditionalResponse(FCurrentDevice);
  end;
  
  FRequestType := rtMain;
  FCurrentDevice := 0;
end;

procedure TForm1.ComPort1TxEmpty(Sender: TObject);
begin
  if FCurrentDevice = 0 then Exit;

  case FRequestType of
    rtMain: SendMainRequest(FCurrentDevice);
    rtAdditional: SendAdditionalRequest(FCurrentDevice);
  end;
end;

procedure TForm1.Timer1Timer(Sender: TObject);
begin
  if not ComPort1.Connected then Exit;

  if FCurrentDevice = 0 then
  begin
    FCurrentDevice := 1;
    FRequestType := rtMain;
  end;
end;

end.
