// Основной обработчик состояния 1
procedure TfMain.ProcessState1(i: Integer);
var
  hh, mm: Word;
begin
  UpdateTestTimeDisplay(i); // Обновление времени
  WriteTestData(i); // Запись данных
  HandleCompressorLogic(i); // Логика работы компрессора
  HandleControlPoints(i); // Работа с контрольными точками
  CheckTestCompletion(i); // Проверка завершения теста
end;

// 1. Обновление отображения времени
procedure TfMain.UpdateTestTimeDisplay(i: Integer);
var
  tm: TDateTime;
  hh, mm, ss, ms: Word;
  st: string;
begin
  tm := Now - tmStart[i];
  DecodeTime(tm, hh, mm, ss, ms);
  mmCur[i] := 60 * hh + mm;
  
  if TimeIsp[i] > 200 then
    st := Format('%.2d:%.2d', [hh, mm])
  else
    st := IntToStr(mmCur[i]);
    
  GetPanel(i).Caption := st;
end;

// 2. Логика работы компрессора
procedure TfMain.HandleCompressorLogic(i: Integer);
begin
  if not flParams[i] then
  begin
    HandleBasicCompressorCycles(i);
    Exit;
  end;
  
  HandleAdvancedCompressorCycles(i);
  HandleDefrostCycles(i);
end;

// 3. Обработка контрольных точек
procedure TfMain.HandleControlPoints(i: Integer);
begin
  UpdateControlTimeIndicator(i);
  
  if ShouldSaveCheckpointData(i) then
  begin
    SaveCheckpointData(i);
    MoveToNextCheckpoint(i);
  end;
end;

// 4. Проверка завершения теста
procedure TfMain.CheckTestCompletion(i: Integer);
begin
  if (mmCur[i] >= TimeIsp[i]) or 
     (IsEarlyCompletionConditionMet(i)) then
  begin
    FinalizeTest(i);
    PrepareForDataInput(i);
  end;
end;

// Вспомогательные методы
function TfMain.GetPanel(i: Integer): TPanel;
begin
  Result := TPanel(FindComponent('pCurTime_' + IntToStr(i)));
end;

procedure TfMain.HandleBasicCompressorCycles(i: Integer);
begin
  // Логика для невыбранной модели
  if (numOnCmp[i] = numOffCmp[i]) and 
     (arrW[i,NumVal[i]-1] - arrW[i,NumVal[i]-2] > UstW) then
  begin
    Inc(numOnCmp[i]);
    UpdateButtonState(i, 'Green');
  end;

  if (numOnCmp[i] > numOffCmp[i]) and 
     (arrW[i,NumVal[i]-1] < UstW) and 
     (arrW[i,NumVal[i]-2] < UstW) then
  begin
    Inc(numOffCmp[i]);
    UpdateCycleCounter(i);
    UpdateButtonState(i, 'Yellow');
  end;
end;

procedure TfMain.UpdateButtonState(i: Integer; Color: string);
begin
  with TJvXPButton(FindComponent('BtnState_' + IntToStr(i))) do 
    Glyph.LoadFromFile(MyDir + 'Img\' + Color + '.bmp');
end;
1. Расчет и отображение времени:
•	Формат времени:
o	Если общее время испытания (TimeIsp[i]) > 200 минут, время отображается в формате ЧЧ:ММ с ведущими нулями (например, 02:05).
o	Если ≤ 200 минут, показывается только количество минут (например, 125).
•	Компонент: Время выводится на панель pCurTime_i.
2. Запись данных:
•	Методы:
o	WriteDataInArr(i) — сохраняет текущие значения мощности и температуры в массивы.
o	WriteDataInFile(i) — записывает данные в файл для последующего анализа.
3. Обработка случая "Модель не выбрана" (flParams[i] = false):
•	Включение компрессора:
o	Проверяется, если количество включений равно выключениям, и текущая мощность превышает уставку (UstW).
o	При выполнении: увеличивается счетчик numOnCmp[i], кнопка BtnState_i становится зеленой.
•	Выключение компрессора:
o	Если компрессор включен больше, чем выключен, и мощность ниже уставки, увеличивается numOffCmp[i], кнопка становится желтой.
4. Обработка случая "Модель выбрана" (flParams[i] = true):
•	Управление меткой контрольного времени (lChTm_i):
o	Метод End: Метка видна до достижения контрольного времени (CheckTime).
o	Метод Off: Учитывается статус компрессора. Метка скрывается после его выключения.
o	Без bgChTm: Метка появляется за CheckTime минут до конца испытания.
•	Инициализация контрольного времени:
o	При первом достижении контрольного времени сохраняются начальные значения расхода энергии (bgnTokr[i], bgnWch[i]).
5. Определение оттайки (разморозки):
•	Метод DefinedOttaika(i): Анализирует данные для выявления циклов разморозки (актуально для систем No Frost).
6. Контроль циклов компрессора:
•	Включение:
o	Если компрессор не работал или циклы равны, и мощность превышает уставку — счетчик numOnCmp[i] увеличивается.
•	Выключение:
o	Если мощность падает ниже уставки, проверяется стабильность (два последовательных значения). При подтверждении — увеличивается numOffCmp[i].
o	При первом выключении сохраняются параметры испытания (мощность, время).
7. Проверка завершения контрольного времени:
•	Условия:
o	Достигнуто контрольное время (CheckTime) или общее время испытания (TimeIsp[i]).
o	Для метода End данные сохраняются только по мощности, для других методов — все параметры.
•	Действия:
o	Обновляется интерфейс (скрывается метка lChTm_i).
o	Сохраняются данные в массивы и файл.
o	Если результат промежуточной точки неудовлетворителен (ResIsp[i] = false), переход к следующей точке без ввода данных блоков.
8. Переход к следующей контрольной точке:
•	Обновление данных:
o	Новая контрольная точка (nCheckPoint[i]++), загрузка ее параметров из БД.
o	Активация полей для ввода данных блоков (температура, время) в интерфейсе.
•	Настройка флагов: Определяется, нужно ли на следующей точке учитывать расход энергии и мощность.
9. Завершение испытания:
•	Условия:
o	Истекло общее время.
o	Достигнуто контрольное время с учетом отключений компрессора.
•	Действия:
o	Сохранение финальных параметров.
o	Активация интерфейса для ввода дополнительных данных (блоки, время включения/выключения).
o	Переход в состояние StatePos[i] = 2 (ожидание данных).
Проблемные места:
•	Сложность условий: Множество вложенных проверок затрудняет понимание логики.
•	Работа с компонентами: Использование FindComponent может замедлять выполнение.
•	Магические числа: Например, TimeIsp[i] > 200 — лучше использовать константы.
Рекомендации:
•	Рефакторинг: Разделить код на методы (например, UpdateTimeDisplay, HandleCompressorCycles).
•	Кэширование компонентов: Заменить FindComponent на прямой доступ через массивы.
•	Комментарии: Добавить пояснения для сложных условий и бизнес-логики.


