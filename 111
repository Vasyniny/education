
Вот подробное объяснение кода процедуры `ELpribTxEmpty`, которая обрабатывает данные от измерителей мощности (ELprib):

---

### **1. Общее назначение**
Эта процедура вызывается при получении данных от устройства ELprib через COM-порт. Она:
- Читает сырые байты из буфера порта.
- Проверяет контрольную сумму (CRC).
- Разбирает данные и обновляет интерфейс (мощность ХП, температуру окружающей среды).

---

### **2. Структура кода**
#### **2.1. Объявления типов и переменных**
```pascal
type
  SingleBytes = array [0..3] of byte; // Массив из 4 байт для хранения числа float (single)
var
  Count, i, j, BytesRead, ps, z: integer;
  st: string;
  S: single; // 32-битное число с плавающей запятой (для мощности и температуры)
```
- `SingleBytes` — массив для хранения 4 байт, из которых собирается `single` (аналог `float` в C).
- `BytesRead` — количество прочитанных байт из COM-порта.
- `S` — переменная для хранения распарсенных значений (мощность, температура).

---

#### **2.2. Чтение данных из COM-порта**
```pascal
FillChar(ResponseBufferELpr, SizeOf(ResponseBufferELpr), 0); // Очистка буфера
BytesRead := ELprib.Read(ResponseBufferELpr, 120); // Чтение до 120 байт
```
- `FillChar` обнуляет буфер перед чтением.
- `ELprib.Read` читает данные из порта в `ResponseBufferELpr`.

---

#### **2.3. Определение группы позиций**
```pascal
case nELpr of
  1: st := 'для позиций 1,2,3';
  2: st := 'для позиций 4,5,6';
  3: st := 'для позиций 7,8,9';
  4: st := 'для позиций 10,11,12';
end;
```
- `nELpr` — номер текущего измерителя (1-4).
- `st` — строка для логов (указывает, к каким позициям относится устройство).

---

#### **2.4. Проверка связи с устройством**
```pascal
if BytesRead = 0 then
begin
  if flELpr[nELpr] then 
    RecordLOG('Измерители мощности ' + st + ' не отвечают. Проверьте наличие питания на линии.', true);
  flELpr[nELpr] := false; // Флаг связи = false
end
else
begin
  if ResponseBufferELpr[0] = nELpr then
  begin
    if not flELpr[nELpr] then 
      RecordLOG('Связь с измерителями мощности ' + st + ' восстановлена.', true);
    flELpr[nELpr] := true; // Флаг связи = true
  end;
end;
```
- Если `BytesRead = 0`, значит, устройство не ответило (записывается ошибка в лог).
- Если первый байт ответа совпадает с `nELpr`, значит, связь восстановлена.

---

#### **2.5. Проверка CRC и разбор данных**
```pascal
if BytesRead > 0 then
begin
  ResponseLengthELpr := BytesRead;
  ELpribCalculateCRC16(ResponseBufferELpr, BytesRead - 2); // Вычисление CRC
  if (ResponseBufferELpr[BytesRead-2] = Lo(crcELpr)) and 
     (ResponseBufferELpr[BytesRead-1] = Hi(crcELpr)) then // Проверка CRC
  begin
    // Если CRC верна, обрабатываем данные
  end;
end;
```
- `ELpribCalculateCRC16` вычисляет контрольную сумму.
- Если CRC совпадает, данные считаются достоверными.

---

#### **2.6. Обновление интерфейса (цвета светодиодов)**
```pascal
case ResponseBufferELpr[0] of
  1: for i := 1 to 3 do 
       with TJvLED(FindComponent('ledEL' + IntToStr(i))) do ColorOn := clAqua;
  2: for i := 4 to 6 do 
       with TJvLED(FindComponent('ledEL' + IntToStr(i))) do ColorOn := clAqua;
  3: for i := 7 to 9 do 
       with TJvLED(FindComponent('ledEL' + IntToStr(i))) do ColorOn := clAqua;
  4: for i := 10 to 11 do 
       with TJvLED(FindComponent('ledEL' + IntToStr(i))) do ColorOn := clAqua;
end;
```
- В зависимости от номера устройства (`ResponseBufferELpr[0]`), меняется цвет светодиодов (LED) на форме.

---

#### **2.7. Разбор данных о мощности (если пакет полный — 105 байт)**
```pascal
if BytesRead = 105 then
begin
  for j := 0 to 2 do // Цикл по 3 каналам мощности
  begin
    // Сборка single из 4 байт (обратный порядок!)
    SingleBytes(S)[0] := ResponseBufferELpr[4 + j*4];
    SingleBytes(S)[1] := ResponseBufferELpr[3 + j*4];
    SingleBytes(S)[2] := ResponseBufferELpr[6 + j*4];
    SingleBytes(S)[3] := ResponseBufferELpr[5 + j*4];

    // Коррекция значения (для некоторых каналов +30)
    if (j = 1) or (j = 2) then S := S + 30;

    // Определение позиции на форме
    case ResponseBufferELpr[0] of
      1: ps := 0; // Позиции 1-3
      2: ps := 3; // Позиции 4-6
      3: ps := 6; // Позиции 7-9
      4: ps := 9; // Позиции 10-12
    end;

    // Вывод мощности на экран
    with TPanel(FindComponent('pCurW_' + IntToStr(j + 1 + ps))) do 
      Caption := RealToStr(S, 5, 1);

    // Сохранение значения в массив valW
    valW[j + 1 + ps] := S;
  end;
```
- Данные мощности хранятся в 4-байтных блоках в формате `single`.
- Байты переставляются из-за разницы в порядке байт (endianness).
- Для некоторых каналов добавляется поправка `+30`.
- Значения выводятся в соответствующие панели (`pCurW_1`, `pCurW_2` и т. д.).

---

#### **2.8. Разбор температуры окружающей среды (Tokr)**
```pascal
SingleBytes(S)[0] := ResponseBufferELpr[98];
SingleBytes(S)[1] := ResponseBufferELpr[97];
SingleBytes(S)[2] := ResponseBufferELpr[100];
SingleBytes(S)[3] := ResponseBufferELpr[99];
pTokr.Caption := RealToStr(S, 5, 1); // Вывод температуры
Tokr := S; // Сохранение в глобальную переменную
```
- Температура (`Tokr`) также передается как `single` и парсится аналогично мощности.
- Выводится на панель `pTokr`.

---

### **3. Итог**
Эта процедура:
1. Принимает сырые данные от измерителя мощности.
2. Проверяет их целостность (CRC).
3. Разбирает значения мощности и температуры.
4. Обновляет интерфейс (панели, светодиоды).
5. Логирует ошибки связи.

Основная сложность — работа с бинарными данными и преобразование байт в числа с плавающей запятой. Это типично для обмена данными с аппаратными устройствами через COM-порт.




procedure HandleSelectedModel(i: Integer);
var
  k: Integer;
begin
  // 1. Управление индикатором контрольного времени ("K")
  UpdateCheckTimeIndicator(i);

  // 2. Инициализация контрольного времени
  InitializeCheckTime(i);

  // 3. Определение режима оттайки (для Full No Frost)
  DefinedOttaika(i);

  // 4. Контроль работы компрессора
  MonitorCompressorOperation(i);

  // 5. Проверка завершения контрольного времени
  if CheckEndOfCheckTime(i) then
  begin
    ProcessEndOfCheckTime(i);
    Exit;
  end;

  // 6. Проверка завершения всего испытания
  if CheckEndOfTest(i) then
  begin
    FinalizeTest(i);
  end;
end;

// Обновление индикатора контрольного времени
procedure UpdateCheckTimeIndicator(i: Integer);
begin
  if bgChTm[i] then
  begin
    // Метод "End" - контрольное время в начале испытания
    if dm.spXP['Method'] = 'End' then
    begin
      if mmCur[i] <= CheckTime[i, nCheckPoint[i]] then
        SetLabelVisibility('lChTm_'+IntToStr(i), True)  // Показываем "K"
      else
        SetLabelVisibility('lChTm_'+IntToStr(i), False); // Скрываем "K"
    end
    // Метод "Off" - контрольное время до первого отключения
    else if dm.spXP['Method'] = 'Off' then
    begin
      if numOffCmp[i] = 0 then
      begin
        if mmCur[i] <= CheckTime[i, nCheckPoint[i]] then
          SetLabelVisibility('lChTm_'+IntToStr(i), True)
        else
          SetLabelVisibility('lChTm_'+IntToStr(i), False);
      end
      else
        SetLabelVisibility('lChTm_'+IntToStr(i), False);
    end;
  end
  else
  begin
    // Контрольное время в конце испытания
    if dm.spXP['Method'] = 'End' then
    begin
      if (mmCur[i] > (TimeIsp[i]-CheckTime[i,nCheckPoint[i]])) and 
         (mmCur[i] < TimeIsp[i]) then
        SetLabelVisibility('lChTm_'+IntToStr(i), True);
    end
    else
    begin
      if numOffCmp[i] = 0 then
      begin
        if (mmCur[i] > (TimeIsp[i]-CheckTime[i,nCheckPoint[i]])) and 
           (mmCur[i] < TimeIsp[i]) then
          SetLabelVisibility('lChTm_'+IntToStr(i), True);
      end
      else
        SetLabelVisibility('lChTm_'+IntToStr(i), False);
    end;
  end;
end;

// Инициализация контрольного времени
procedure InitializeCheckTime(i: Integer);
begin
  if ((bgChTm[i]) or ((not bgChTm[i]) and (mmCur[i] = TimeIsp[i]-CheckTime[i,nCheckPoint[i]]))) and 
     (bgnTokr[i] = 0) then
  begin
    bgnTokr[i] := Tokr;
    bgnWch[i] := curWch[i];
    SetLabelVisibility('lChTm_'+IntToStr(i), True);
  end;
end;

// Мониторинг работы компрессора
procedure MonitorCompressorOperation(i: Integer);
begin
  // Проверка включения компрессора
  if ((not flOnCmp[i]) or (numOnCmp[i] = numOffCmp[i])) and
     ((chMetod[i] <> 'FnF') or ((chMetod[i] = 'FnF') and flWork2[i])) and
     ((arrW[i,NumVal[i]-1] - arrW[i,NumVal[i]-3]) > UstW) then
  begin
    Inc(numOnCmp[i]);
    SetButtonGlyph('BtnState_' + IntToStr(i), 'Green.bmp');
  end;

  // Проверка отключения компрессора
  if (numOnCmp[i] > numOffCmp[i]) and
     ((chMetod[i] <> 'FnF') or ((chMetod[i] = 'FnF') and flWork2[i])) and
     ((arrW[i,NumVal[i]-3] - arrW[i,NumVal[i]-1]) > UstW) and
     (arrW[i,NumVal[i]-1] < UstW) and (arrW[i,NumVal[i]-2] < UstW) then
  begin
    Inc(numOffCmp[i]);
    SetPanelCaption('pCycl_'+IntToStr(i), IntToStr(numOffCmp[i]));
    SetButtonGlyph('BtnState_' + IntToStr(i), 'Yellow.bmp');

    // Обработка первого отключения
    if numOffCmp[i] = 1 then
    begin
      wCmp[i] := true; 
      ttCmp[i] := true; 
      TimeOffCmp[i] := Now - tmStart[i];
      
      if chMetod[i] = 'End' then
      begin
        if flW[i,nCheckPoint[i]] then
        begin
          ttW[i,nCheckPoint[i]] := arrW[i,NumVal[i]-3];
          nChW[i,nCheckPoint[i]] := NumVal[i]-3;
          CheckParamWatt(i, nCheckPoint[i]);
        end;
      end
      else if endTokr[i,nCheckPoint[i]] = 0 then
      begin
        endTokr[i,nCheckPoint[i]] := Tokr;
        SaveParamIsp(i);
        ParamIspInScreen(i, nCheckPoint[i]);
      end;
    end;
  end;
end;

// Вспомогательные методы
procedure SetLabelVisibility(const AName: string; AVisible: Boolean);
begin
  with TLabel(FindComponent(AName)) do Visible := AVisible;
end;

procedure SetButtonGlyph(const AName, AGlyphFile: string);
begin
  with TJvXPButton(FindComponent(AName)) do 
    Glyph.LoadFromFile(MyDir + 'Img\' + AGlyphFile);
end;

procedure SetPanelCaption(const AName, ACaption: string);
begin
  with TPanel(FindComponent(AName)) do Caption := ACaption;
end;
